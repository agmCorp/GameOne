package com.agm.gameone;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import android.util.Log;

import com.badlogic.androidgames.framework.math.OverlapTester;

public class World {
	public interface WorldListener {
		public void goal();

		public void onRoids();

		public void hit();

		public void coin();
	}

	public static final float WORLD_WIDTH = 10;
	// 4 PANTALLAS
	public static final float WORLD_HEIGHT = 15 * 3;
	public static final int WORLD_STATE_RUNNING = 0;
	public static final int WORLD_STATE_NEXT_LEVEL = 1;
	public static final int WORLD_STATE_GAME_OVER = 2;

	public final Hero hero;
	public final List<EnemyOne> enemies;
	public final List<Steroid> steroids;
	public final List<Coin> coins;
	public Goal goal;
	public CamScroll camScroll;
	public final WorldListener listener;
	public final Random rand;

	public int score;
	public int state;

	public World(WorldListener listener, int level) {
		this.hero = new Hero(5, 3);
		
		// Colisiones
		this.enemies = new ArrayList<EnemyOne>();
		this.steroids = new ArrayList<Steroid>();
		this.coins = new ArrayList<Coin>();
		
		// Camara
		this.camScroll = new CamScroll(WORLD_WIDTH / 2, 7.5f);
		
		this.listener = listener;
		rand = new Random();
		generateLevel(level);

		this.score = 0;
		this.state = WORLD_STATE_RUNNING;
	}

	private void generateLevel(int level) {
		/*
		 * El y aumenta hasta la mitad de la ultima pantalla (pues la meta se
		 * coloca en el medio de la pantalla).
		 */
		float y = 0;
		float x;
		
		
		level = 3;
		
		while (y < WORLD_HEIGHT) {
			Log.i("gameOne", "" + y);
			
			// Probabilidad enemigo
			if (rand.nextFloat() > 0.75 / level + 0.2) {
				// Random x para el enemigo sin que se vaya de la pantalla
				x = rand.nextFloat() * (WORLD_WIDTH - EnemyOne.ENEMYONE_WIDTH)
						+ EnemyOne.ENEMYONE_WIDTH / 2;
				EnemyOne enemyOne = new EnemyOne(x, y);
				enemies.add(enemyOne);
				Log.i("gameOne", "genero enemigo");
			}
			// Probabilidad esteroide
			if (rand.nextFloat() > 0.95) {
				x = rand.nextFloat() * (WORLD_WIDTH - Steroid.STEROID_WIDTH)
						+ Steroid.STEROID_WIDTH / 2;
				Steroid steroid = new Steroid(x, y);
				steroids.add(steroid);
				Log.i("gameOne", "genero esteroide");
			}

			// Probabilidad moneda
			if (rand.nextFloat() > 0.93) {
				x = rand.nextFloat() * (WORLD_WIDTH - Coin.COIN_WIDTH)
						+ Coin.COIN_WIDTH / 2;
				Coin money = new Coin(x, y);
				coins.add(money);
				Log.i("gameOne", "genero moneda");
			}

			y += 4;
		}

		goal = new Goal(WORLD_WIDTH / 2, WORLD_HEIGHT - Goal.GOAL_HEIGHT / 2 - 5);
	}

	public void update(float deltaTime, float accelX, float accelY) {
		updateHero(deltaTime, accelX, accelY);
		updateEnemies(deltaTime);
		updateSteroids(deltaTime);
		updateCoins(deltaTime);
		updateGoal(deltaTime);
		updateCamScroll(deltaTime);
		if (hero.state != Hero.HERO_STATE_HIT) {
			if (hero.state != Hero.HERO_STATE_ONROIDS) {
				checkEnemyCollisions();
				checkCoinCollisions();
				checkSteroidCollisions(deltaTime);
				checkGoalCollisions();
			} else {
				checkCoinCollisions();
				checkSteroidCollisions(deltaTime);
				checkGoalCollisions();
			}
		}
		checkGameOver();
	}

	private void updateHero(float deltaTime, float accelX, float accelY) {
		if (hero.state != Hero.HERO_STATE_HIT) {
			hero.velocity.x = -accelX / 10 * Hero.HERO_XMOVE_MAXVELOCITY;
			hero.velocity.y = -accelY / 10 * Hero.HERO_YMOVE_MAXVELOCITY;
			if (hero.state == Hero.HERO_STATE_ONROIDS && hero.roidsTime > Hero.HERO_ONROIDS_MAX_TIME) {
				hero.steroidsOut();
			}
		}
		hero.update(deltaTime);
	}

	private void updateEnemies(float deltaTime) {
		int len = enemies.size();
		for (int i = 0; i < len; i++) {
			EnemyOne enemyOne = enemies.get(i);
			enemyOne.update(deltaTime);
		}
	}

	private void updateSteroids(float deltaTime) {
		int len = steroids.size();
		for (int i = 0; i < len; i++) {
			Steroid steroid = steroids.get(i);
			steroid.update(deltaTime);
		}
	}
	
	private void updateCoins(float deltaTime) {
		int len = coins.size();
		for (int i = 0; i < len; i++) {
			Coin coin = coins.get(i);
			coin.update(deltaTime);
		}
	}
	
	private void updateGoal(float deltaTime) {
		goal.update(deltaTime);
	}

	private void updateCamScroll(float deltaTime) {
		camScroll.update(deltaTime);
	}
	
	private void checkEnemyCollisions() {
		int len = enemies.size();
		for (int i = 0; i < len; i++) {
			EnemyOne enemyOne = enemies.get(i);
			if (OverlapTester.overlapRectangles(enemyOne.bounds, hero.bounds)) {
				hero.hitEnemyOne();
				listener.hit();
			}
		}
	}

	private void checkCoinCollisions() {
		int len = coins.size();
		for (int i = 0; i < len; i++) {
			Coin coin = coins.get(i);
			if (OverlapTester.overlapRectangles(hero.bounds, coin.bounds)) {
				coins.remove(coin);
				len = coins.size();
				listener.coin();
				score += Coin.COIN_SCORE;
			}
		}
	}

	private void checkSteroidCollisions(float deltaTime) {
		int len = steroids.size();
		for (int i = 0; i < len; i++) {
			Steroid steroid = steroids.get(i);
			if (OverlapTester.overlapRectangles(hero.bounds, steroid.bounds)) {
				steroids.remove(steroid);
				len = steroids.size();
				hero.pickSteroids();
				listener.onRoids();
				score += Steroid.STEROID_SCORE;
			}
		}
	}

	private void checkGoalCollisions() {
		if (OverlapTester.overlapRectangles(goal.bounds, hero.bounds)) {
			state = WORLD_STATE_NEXT_LEVEL;
		}
	}

	private void checkGameOver() {
		if (hero.state == Hero.HERO_STATE_HIT) {
			state = WORLD_STATE_GAME_OVER;
		}
	}
}
